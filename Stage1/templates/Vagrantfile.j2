ENV['VAGRANT_DEFAULT_PROVIDER'] = 'libvirt'

#Vagrant.require_version ">= 1.8.6", "< 2.0.0"

# Check required plugins
REQUIRED_PLUGINS_LIBVIRT = %w(vagrant-libvirt)
exit unless REQUIRED_PLUGINS_LIBVIRT.all? do |plugin|
  Vagrant.has_plugin?(plugin) || (
    puts "The #{plugin} plugin is required. Please install it with:"
    puts "$ vagrant plugin install #{plugin}"
    false
  )
end


Vagrant.configure("2") do |config|
  config.vm.provider :libvirt do |domain|
    # increase nic adapter count to be greater than 8 for all VMs.
    domain.management_network_address = "10.255.1.0/24"
    domain.management_network_name = "wbr1"
    domain.nic_adapter_count = 130
  end

{% if generate_ansible_hostfile == True %}
  #Generating Ansible Host File at following location:
  #    ./.vagrant/provisioners/ansible/inventory/vagrant_ansible_inventory
  config.vm.provision "ansible" do |ansible|
    ansible.playbook = "./helper_scripts/empty_playbook.yml"
{% if function_group is defined -%}
    # ANSIBLE GROUPS CONFIGURATION
    ansible.groups = {
{%- for function in function_group %}
      "{{ function }}" => [{% for device in function_group[function] %}"{{device}}",{% endfor %}],{% endfor %}
      "network:children" => [{% for function in function_group%}{% if function in network_functions%}"{{function}}",{% endif %}{% endfor %}]
    }
{%- endif %}
  end{% endif %}

{% for device in devices %}
 {% if device.function == "oob-switch" -%}

 {%- endif %}

 {% if device.function == "oob-server" -%}
  
 {%- endif %}

 {% if device.function == "exit" -%}
 
 {%- endif %} #}

 {% if device.function == "superspine" -%}

 {%- endif %}

 {% if device.function == "spine" -%}

 {%- endif %}

 {% if device.function == "leaf" -%}

 {%- endif %}

 {% if device.function == "tor" -%}

 {%- endif %} #}

 {% if device.function == "host" -%}
  ##### DEFINE VM for {{ device.hostname }} #####
  config.vm.define "{{ device.hostname }}" do |device|
    device.vm.hostname = "{{ device.hostname }}"
    {% if device.pxehost=="True" and provider == 'libvirt'%}
    #NO BOX USED FOR PXE DEVICE
    {% else %}
    device.vm.box = "{{ device.os }}"
     {% if device.version %}
     device.vm.box_version = "{{ device.version }}"
     {% endif %}
     {% if device.vagrant_user %}
     device.ssh.username = "{{ device.vagrant_user }}"
     {% endif %}
    {% endif %}
    device.vm.provider :libvirt do |v|
    {% if device.pxehost=="True" %}
     v.storage :file, :size => '100G', :type => 'qcow2', :bus => 'sata', :device => 'sda'
     v.boot 'hd'
     v.boot 'network'
    {% endif %}
    v.nic_model_type = 'e1000'
 {% endif %}
 {% if device.memory is defined %}
  v.memory = {{ device.memory }}
 {% endif %}
 end
 device.vm.synced_folder ".", "/vagrant", disabled: true
 device.vm.network :forwarded_port, guest: 22, host: {{ device.ssh_port }}, host_ip: "0.0.0.0", id: "ssh", auto_correct:true

 # NETWORK INTERFACES
 {% for link in device.interfaces %}
  # link for {{ link.local_interface }} --> {{ link.remote_device }}:{{ link.remote_interface }}
  device.vm.network "private_network",
    :mac => "{{ link.mac }}",
    :libvirt__tunnel_type => 'udp',
    :libvirt__tunnel_local_ip => '{{ link.local_ip }}',
    :libvirt__tunnel_local_port => '{{ link.local_port }}',
    :libvirt__tunnel_ip => '{{ link.remote_ip }}',
    :libvirt__tunnel_port => '{{ link.remote_port }}',
    :libvirt__iface_name => '{{ link.local_interface }}',
    auto_config: false
  {% endfor %}
  # Fixes "stdin: is not a tty" and "mesg: ttyname failed : Inappropriate ioctl for device"  messages --> https://github.com/mitchellh/vagrant/issues/1673
  device.vm.provision :shell , inline: "(sudo grep -q 'mesg n' /root/.profile 2>/dev/null && sudo sed -i '/mesg n/d' /root/.profile  2>/dev/null) || true;", privileged: false

  {% if device.config is defined %}
    # Run the Config specified in the Node Attributes
    device.vm.provision :shell , privileged: false, :inline => 'echo "$(whoami)" > /tmp/normal_user'
    device.vm.provision :shell , path: "{{ device.config }}"
  {% endif %}

  # Install Rules for the interface re-map
  {% if device.pxehost=="True" and provider == 'libvirt' -%}
    # NO REMAP for LIBVIRT PXE DEVICE
  {% elif device.remap=="False" -%}
    # REMAP Disabled for this node
  {% else -%}
    device.vm.provision :shell , :inline => <<-delete_udev_directory
      if [ -d "/etc/udev/rules.d/70-persistent-net.rules" ]; then
      rm -rfv /etc/udev/rules.d/70-persistent-net.rules &> /dev/null
      fi
      rm -rfv /etc/udev/rules.d/70-persistent-net.rules &> /dev/null
      delete_udev_directory

  {% for link in device.interfaces -%}
    device.vm.provision :shell , :inline => <<-udev_rule
      echo "  INFO: Adding UDEV Rule: {{ link.mac }} --> {{ link.local_interface }}"
      echo 'ACTION=="add", SUBSYSTEM=="net", ATTR{address}=="{{ link.mac }}", NAME="{{ link.local_interface }}", SUBSYSTEMS=="pci"' >> /etc/udev/rules.d/70-persistent-net.rules
      udev_rule
  {% endfor %}
  device.vm.provision :shell , :inline => <<-vagrant_interface_rule
    echo "  INFO: Adding UDEV Rule: Vagrant interface = {% if device.vagrant %}{{ device.vagrant }}{%else%}vagrant{% endif%}"
    echo 'ACTION=="add", SUBSYSTEM=="net", ATTR{ifindex}=="2", NAME="{% if device.vagrant %}{{ device.vagrant }}{%else%}vagrant{% endif%}", SUBSYSTEMS=="pci"' >> /etc/udev/rules.d/70-persistent-net.rules
    echo "#### UDEV Rules (/etc/udev/rules.d/70-persistent-net.rules) ####"
    cat /etc/udev/rules.d/70-persistent-net.rules
    vagrant_interface_rule
  {% endif -%}

  {% if device.pxehost=="True" and provider == 'libvirt' -%}
    # NO REMAP APPLICATION for LIBVIRT PXE DEVICE
  {% elif device.remap=="False" -%}
    # NO REMAP APPLICATION Required
  {% else -%}
    # Run Any Platform Specific Code and Apply the interface Re-map
    #   (may or may not perform a reboot depending on platform)
    #device.vm.provision :shell , :inline => $script
  {% endif -%}
  end
{% endfor %}

end

{%- endif %}
### End Hosts###

{%- endfor %}